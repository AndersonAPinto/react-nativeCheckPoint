const handleStop = async () => {
    const eventoStop = { tipo: "Término", momento: new Date() };
    
    // Atualize o estado com o novo evento de término
    setHistoricoEventos(historicoAtual => [...historicoAtual, eventoStop]);

    // Espere a próxima 'tick' do event loop para garantir que o estado tenha sido atualizado
    await new Promise(resolve => setTimeout(resolve, 0));

    // Copia os eventos para uma variável temporária
    // Note que agora você não precisa filtrar por 'eventoStop', já que ele foi adicionado ao estado
    const eventosSalvos = historicoEventos;

    // Salve o evento de término
    await salvarEvento(eventoStop);

    const dataSalvamento = new Date().toLocaleString('pt-BR');

    try {
        const dadosAtuais = await AsyncStorage.getItem('dadosSalvos');
        const dadosAtualizados = dadosAtuais ? JSON.parse(dadosAtuais) : {};
        dadosAtualizados[dataSalvamento] = eventosSalvos;

        await AsyncStorage.setItem('dadosSalvos', JSON.stringify(dadosAtualizados));
        Alert.alert("Trabalho Finalizado", "Carga horária do dia salva");

        // Resetar `historicoEventos` aqui, se você quiser garantir que esteja limpo antes da navegação
        setHistoricoEventos([]);

        navigation.navigate('Extratos', { eventosSalvos: eventosSalvos });
    } catch (error) {
        console.log("Erro ao salvar dados", error);
    }

    setIsRunning(false);
    setTempoDecorrido(0);
    setUltimoStop(new Date());
    setHistoricoStop(true);

    // Considerar mover esta limpeza para um lugar mais adequado se necessário
    setTimeout(() => {
        setHistoricoStop(false);
    }, 1000);
};
